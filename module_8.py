# -*- coding: utf-8 -*-
"""Module 8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15PHt7otrT4LsFENJK_eeHOevWa1NmPks

1:
"""

a= "Great Day!"
b=[1,2,3,4,5,6,7,'!']
c= 23.45
d=(1,2,3,4,5,6,7,'!')

"""2:"""

String
String
List
float

"""3:"""

result_div = 10 / 3
print(f"10 / 3 = {result_div}")

result_mod = 10 % 3
print(f"10 % 3 = {result_mod}")

result_floor = 10 // 3
print(f"10 // 3 = {result_floor}")

result_exp = 2 ** 3
print(f"2 ** 3 = {result_exp}")

"""4:"""

my_list = [1, "hello", 3.14, True, [1, 2, 3], (4, 5, 6), {"a": 1, "b": 2}, None, 5 + 2j, "world"]

for element in my_list:
  print(f"Element: {element}, Data Type: {type(element)}")

"""5:"""

A = int(input("Enter the number A: "))
B = int(input("Enter the number B: "))

count = 0
while A % B == 0:
  C = A // B;
  count += 1

if count > 0:
  print(f"{A} is purely divisible by {B}, {count} times")
else:
  print(f"{A} is not purely divisible by {B}")

"""6:"""

import random

my_list = [random.randint(1, 100) for _ in range(25)]

for element in my_list:
  if element % 3 == 0:
    print(f"{element} is divisible by 3")
  else:
    print(f"{element} is not divisible by 3")

"""7:"""

# Mutable data types can be changed after they are created.
# Immutable data types cannot be changed after they are created.

# Examples of immutable data types:
# Strings, Numbers (integers, floats), Tuples

# Strings:
string1 = "hello"
# Attempting to change a character in a string directly will result in an error.
# string1[0] = "H"  # This will cause an error.
string2 = "H" + string1[1:] # Create a new string with the change.
print(string1) # Output: hello
print(string2) # Output: Hello

# Numbers:
number = 10
number += 5 # creates a new number object with the value 15.
print(number) # Output: 15

# Tuples:
my_tuple = (1, 2, 3)
# my_tuple[0] = 4  # This will cause an error.
# However, you can create a new tuple with the change.

# Examples of mutable data types:
# Lists, Dictionaries, Sets


# Lists:
my_list = [1, 2, 3]
my_list[0] = 4  # Modify the list in-place.
print(my_list) # Output: [4, 2, 3]

# Dictionaries:
my_dict = {"a": 1, "b": 2}
my_dict["a"] = 3 # Modify the dictionary in-place.
print(my_dict) # Output: {'a': 3, 'b': 2}


# Sets:
my_set = {1, 2, 3}
my_set.add(4)  # Modify the set in-place.
print(my_set) # Output: {1, 2, 3, 4}

