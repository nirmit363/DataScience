# -*- coding: utf-8 -*-
"""Module 9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V_1mhltS9Y5gYnMY3OgBuKf2ZXwxcBB9

1:
"""

# This is a single-line comment

"""
This is a multi-line comment.
It can span multiple lines.
"""

# Another single-line comment

"""2:

"""

# Variables in Python are used to store data.  They don't need explicit declaration like in some other languages (e.g., C++ or Java).
# You assign a value to a variable name, and Python automatically infers the data type.

# Example declarations and assignments:

# Integer
age = 30

# String
name = "Alice"

# Float
price = 99.99

# Boolean
is_active = True

# List
my_list = [1, 2, 3, "four"]

# Dictionary
my_dict = {"name": "Bob", "age": 25}

# Print the values
print(age)
print(name)
print(price)
print(is_active)
print(my_list)
print(my_dict)


# Variable names are case-sensitive
myVariable = 10
MyVariable = 20

print(myVariable)
print(MyVariable)

# You can reassign a variable to a different data type
my_variable = 10
my_variable = "Hello"

print(my_variable)

"""3:"""

# Type Conversion (Casting)

# int(): Converts a value to an integer.
string_num = "10"
integer_num = int(string_num)
print(integer_num, type(integer_num))

# float(): Converts a value to a floating-point number.
integer_to_float = float(integer_num)
print(integer_to_float, type(integer_to_float))

# str(): Converts a value to a string.
number_to_string = str(integer_num)
print(number_to_string, type(number_to_string))

# bool(): Converts a value to a Boolean.
# Values considered "falsy": 0, 0.0, "", None, [], {}, ()
number_to_bool = bool(10)
print(number_to_bool, type(number_to_bool))

empty_list_to_bool = bool([])
print(empty_list_to_bool, type(empty_list_to_bool))


# list(): Converts an iterable (like a tuple or string) to a list.
my_tuple = (1, 2, 3)
my_list_from_tuple = list(my_tuple)
print(my_list_from_tuple, type(my_list_from_tuple))

# tuple(): Converts an iterable to a tuple.
my_list_to_tuple = tuple(my_list_from_tuple)
print(my_list_to_tuple, type(my_list_to_tuple))


# dict(): Creates a dictionary from key-value pairs.
#Note that you will need a sequence of key-value pairs.
#A tuple of 2-element tuples works:
key_value_pairs = (("name", "Alice"), ("age", 30))
my_dict = dict(key_value_pairs)
print(my_dict)


# Important Considerations:

# Implicit Type Conversion (Coercion):
# Python sometimes performs type conversions automatically. For example:
result = 10 + 2.5
print(result, type(result))

# Error Handling:
# Attempting to convert an incompatible data type will raise a TypeError.
#Example:
#invalid_conversion = int("abc") # Raises a TypeError

"""4:"""

# Save the code above as a Python file (e.g., my_script.py)

# Then, in your command line or terminal, navigate to the directory where you saved the file.

# Execute the script using the python command followed by the file name:
# python my_script.py

"""5:"""

my_list = [1, 2, 3, 4, 5]
sub_list = my_list[1:3]
sub_list

"""6:"""

# Complex numbers are numbers with a real and an imaginary part.
# They are represented in the form a + bj, where a is the real part, b is the imaginary part, and j is the imaginary unit (âˆš-1).

# In Python, complex numbers are built-in data types.
# They can be created using the following methods:

# 1. Directly specifying the real and imaginary parts:
z1 = 2 + 3j
print(z1)
print(type(z1))


# 2. Using the complex() function:
z2 = complex(4, -1)
print(z2)
print(type(z2))

# 3. Converting a string to a complex number:
z3_str = "5-2j"
z3 = complex(z3_str)
print(z3)
print(type(z3))

# Accessing the real and imaginary parts:
print(z1.real)
print(z1.imag)

# Performing operations with complex numbers:
z4 = z1 + z2
print(z4)

z5 = z1 * z2
print(z5)

# Other operations like subtraction, division, and exponentiation are also supported.

"""7:"""

age = 25

"""8:"""

price = 9.99
print(type(price))

"""9:"""

name = "Your Full Name"
name

"""10:"""

text = "Hello, World!"
substring = text[7:12]
substring

"""11:"""

is_student = True